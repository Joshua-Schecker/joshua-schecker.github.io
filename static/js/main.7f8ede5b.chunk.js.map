{"version":3,"sources":["components/Table/columns.js","utils/utils.js","components/Table/Table.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["columns","Header","width","style","accessor","data","name","url","svn_url","id","Cell","row","href","value","icon","faStar","toString","replace","moment","fromNow","App","state","currentPage","pages","loading","handleInteraction","bind","errorText","fetch","mode","then","response","json","setState","items","refs","table","catch","error","alert","finally","pageSize","page","newData","this","slice","Math","ceil","length","console","log","instance","updatePages","height","ref","manual","onFetchData","defaultPageSize","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mYAWaA,EAAU,CACrB,CACEC,OAAQ,OACRC,MAAO,IACPC,MAAO,CAAC,YAAe,QAEvBC,SAAU,SAAAC,GAAI,MAAK,CAACC,KAAMD,EAAKC,KAAMC,IAAKF,EAAKG,UAC/CC,GAAI,OACJC,KAAM,SAAAC,GAAG,OAAK,8BAAM,uBAAGC,KAAMD,EAAIE,MAAMN,KAAMI,EAAIE,MAAMP,SAEzD,CACEL,OAAQ,cACRG,SAAU,eAEZ,CACEH,OAAQ,QACRG,SAAU,mBACVF,MAAO,IACPQ,KAAM,SAAAC,GAAG,OAAI,8BAAM,kBAAC,IAAD,CAAiBG,KAAMC,MAA7B,IAAqDJ,EAAIE,MC5B/DG,WAAWC,QAAQ,0BAA2B,UD8BvD,CACEhB,OAAQ,eACRG,SAAU,aACVF,MAAO,IACPQ,KAAM,SAAAC,GAAG,OAAKO,IAAOP,EAAIE,OAAOM,SAAQ,ME5BvBC,G,kBACnB,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXhB,KAAM,GACNiB,YAAa,GACbC,MAAO,KACPC,SAAS,GAEX,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBARb,E,iFAaM,IAAD,OACXC,EAAY,wDAClBC,MAAM,sGAAuG,CAACC,KAAM,SACjHC,KAAM,SAAAC,GACHA,EAASC,OAAOF,KAAM,SAAAzB,GAEpB,EAAK4B,SAAS,CAAC5B,KAAMA,EAAK6B,QAE1B,EAAKT,kBAAkB,EAAKU,KAAKC,MAAMf,MAAO,MAE/CgB,MAAO,SAAAC,GACNC,MAAMZ,OAIXU,MAAO,SAAAC,GACNC,MAAMZ,KAEPa,QAAS,WACR,EAAKP,SAAS,CAACT,SAAS,Q,kCAUlBiB,EAAUC,GAClB,IAAMC,EAAU,CACdD,KAAME,KAAKvB,MAAMhB,KAAKwC,MAAMJ,EAAWC,EAAMD,EAAWC,EAAOD,GAC/DlB,MAAOuB,KAAKC,KAAKH,KAAKvB,MAAMhB,KAAK2C,OAASP,IAG5C,OADAQ,QAAQC,IAAIP,GACLA,I,wCAQOtB,EAAO8B,GACvB,IAAMR,EAAQC,KAAKQ,YACjB/B,EAAMoB,SACNpB,EAAMqB,MAENE,KAAKX,SAAS,CACZX,YAAaqB,EAAQD,KACrBnB,MAAOoB,EAAQpB,U,+BAIX,IAAD,EACiCqB,KAAKvB,MAArCC,EADD,EACCA,YAAaC,EADd,EACcA,MAAOC,EADrB,EACqBA,QAC5B,OACE,yBAAKrB,MAAO,CAACkD,OAAQ,SACnB,kBAAC,IAAD,CACErD,QAASA,EACTsD,IAAK,QACLD,OAAQ,IACRE,QAAM,EACNlD,KAAMiB,EACNC,MAAOA,EACPC,QAASA,EACTgC,YAAaZ,KAAKnB,kBAClBgC,gBAAiB,GACjBC,UAAU,wBAEZ,kC,GApFyBC,IAAMC,YCHlBxC,G,uLAEjB,OAAQ,yBAAKsC,UAAU,aACrB,wEACA,kBAAC,EAAD,W,GAJ2BC,IAAMC,YCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC,iB","file":"static/js/main.7f8ede5b.chunk.js","sourcesContent":["import React from 'react';\nimport { formatNumber } from '../../utils/utils';\nimport moment from 'moment';\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n/**\n * Configuration for columns.\n * Accessor with arrow function allows for passing modified values to cell renderer\n * Cell with arrow function allows adding jsx to cell renderer\n * @type {Array}\n */\nexport const columns = [\n  {\n    Header: \"Name\",\n    width: 175,\n    style: {'paddingleft': '10px'},\n    // using object to pass multiple values to cell\n    accessor: data => ({name: data.name, url: data.svn_url}),\n    id: 'name',\n    Cell: row => (<span><a href={row.value.url}>{row.value.name}</a></span>)\n  },\n  {\n    Header: \"Description\",\n    accessor: \"description\"\n  },\n  {\n    Header: \"Stars\",\n    accessor: \"stargazers_count\",\n    width: 100,\n    Cell: row =>(<span><FontAwesomeIcon icon={faStar}/> {formatNumber(row.value)}</span>)\n  },\n  {\n    Header: \"Last Updated\",\n    accessor: \"updated_at\",\n    width: 150,\n    Cell: row => (moment(row.value).fromNow(false))\n  }\n]\n","const formatNumber = function(num) {\nreturn num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n}\n\nexport {formatNumber};\n","import React from \"react\";\n// Import React Table\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport {columns} from './columns';\nimport './table.css';\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      currentPage: [],\n      pages: null,\n      loading: true\n    };\n    this.handleInteraction = this.handleInteraction.bind(this);\n  }\n  /**\n   * Fetch from API on component load\n   */\n  componentDidMount(){\n    const errorText = 'Loading failed.\\nPlease refresh the page to try again';\n    fetch('https://api.github.com/search/repositories?q=language:javascript&sort=stars&order=desc&per_page=100', {mode: 'cors'})\n      .then( response => {\n          response.json().then( data => {\n            // store entire response in state\n            this.setState({data: data.items});\n            // initialize table with api response\n            this.handleInteraction(this.refs.table.state, {});\n          })\n          .catch( error => {\n            alert(errorText)\n          });\n        }\n      )\n      .catch( error => {\n        alert(errorText)\n      })\n      .finally( () =>{\n        this.setState({loading: false})\n      });\n  }\n  /**\n   * called from eventhandler when user interacts with table.\n   * Creates an array, page, and calculates total number of pages.\n   * @param  {[type]} pageSize size of page selected in table\n   * @param  {[type]} page     current page number in table\n   * @return {page, pages}     object used to set currentPage, pages in parent\n   */\n  updatePages(pageSize, page) {\n      const newData = {\n        page: this.state.data.slice(pageSize * page, pageSize * page + pageSize),\n        pages: Math.ceil(this.state.data.length / pageSize)\n      };\n      console.log(newData);\n      return(newData);\n  };\n  /**\n   * Event handler called when pages are need to be updated in table\n   * updates state with new page configurations\n   * @param  {[type]} state    state of child ReactTable component\n   * @param  {[type]} instance unused\n   */\n  handleInteraction(state, instance) {\n    const newData=this.updatePages(\n      state.pageSize,\n      state.page\n    )\n      this.setState({\n        currentPage: newData.page,\n        pages: newData.pages\n    });\n  }\n\n  render() {\n    const { currentPage, pages, loading } = this.state;\n    return (\n      <div style={{height: '100%'}}>\n        <ReactTable\n          columns={columns}\n          ref={'table'}\n          height={300}\n          manual // !important! Forces table not to paginate or sort automatically\n          data={currentPage}\n          pages={pages} // Display the total number of pages\n          loading={loading}\n          onFetchData={this.handleInteraction} // Request new data when things change\n          defaultPageSize={20}\n          className=\"-striped -highlight\"\n        />\n        <br />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Table from './Table/Table';\nimport './app.css';\n\nexport default class App extends React.Component {\n  render() {\n    return (<div className='container'>\n      <h1>Github's Top 100 JavaScript Repositories</h1>\n      <Table />\n    </div>);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}